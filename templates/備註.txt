以下是我們目前討論的功能與設計的總結：

功能與邏輯總結
1. 帳號管理心智圖的核心結構
中心節點：使用者名稱。
第二層節點：帳號類別（如遊戲、金融等）。
第三層節點：帳號名稱或代表該帳號的資料（如 Gmail、手機號碼等）。
第四層節點：具體的帳號資料（如帳號、密碼、網站、備註等）。
2. 操作功能
懸浮操作提示：所有操作功能（如新增、刪除節點等）不使用按鈕，而是通過懸浮文字和快捷鍵進行操作。
快捷鍵功能：參考 jsMind 示例網站的快捷鍵設計，排除導出和存檔相關的快捷鍵。包括：
新增節點、刪除節點、編輯節點快捷鍵。
導航與縮放快捷鍵（如箭頭鍵、Ctrl + +/-）。
視圖重置、節點展開/收起、取消選擇等操作快捷鍵。
3. 搜尋與資料管理
通用搜尋框：搜尋框可以搜索帳號類型和帳號內部的重複資料（如 Gmail、手機號碼等）。搜尋結果將在心智圖中高亮顯示，保留原始結構。
資料更新提示：當用戶更新資料節點時（如手機號碼），提示是否同步更新所有相關帳號，給用戶選擇權。
4. 自動保存與數據處理
自動保存：在用戶離開頁面或登出時自動保存心智圖數據，不使用定時保存功能，但保留後續擴展空間。
後端儲存：數據儲存在 Django 後端，用戶登入後自動加載其專屬的心智圖數據。
5. 界面設計
搜尋框與功能按鈕懸浮布局：搜索框和功能按鈕（新增、刪除等）以懸浮文字方式顯示，置於左右上角，類似 Google Maps 的操作風格。
小地圖與一鍵定位：在左右下角設置小地圖，顯示當前視圖範圍，並提供一鍵定位功能，讓用戶快速導航到特定位置。
鼠標拖曳操作：心智圖支持鼠標拖曳和滾輪縮放，用戶可以像操作地圖一樣自由調整視圖。
分段式實現方案
第一階段：先搭建框架，實現心智圖的基本結構、懸浮文字提示和快捷鍵操作功能，並確保心智圖的拖曳和縮放操作正常運行。
第二階段：添加搜尋功能，實現高亮顯示和關聯資料的查詢。
第三階段：實現自動保存功能，並將數據與後端 Django 進行連接。
最終階段：優化界面，包括小地圖和一鍵定位功能，並進行全面測試。
測試與迭代
每個階段完成後進行測試，確保基本功能和操作邏輯符合需求，並根據測試結果進行修正和優化。



後端設計概述


數據模型 (models.py)：
定義了 MindMap 模型，儲存每個使用者的心智圖數據，並與使用者模型（User）建立一對一關聯。

視圖 (views.py)：
save_mindmap API 接收前端傳來的心智圖 JSON 數據，並儲存在對應使用者的 MindMap 記錄中。
load_mindmap API 透過使用者 ID 查詢心智圖數據，並將其以 JSON 格式返回。

URL 路徑 (urls.py)：
設置了 save_mindmap 和 load_mindmap 的 API 路徑，使前端能夠透過這些路徑與後端交互。

管理後台 (admin.py)：
將 MindMap 模型註冊到 Django 管理後台，允許管理員在後台查看和管理使用者的心智圖數據。

項目設定 (settings.py)：
檢查並啟用了 CSRF 保護，確保前後端的數據請求安全性。